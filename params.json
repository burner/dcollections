{"name":"Dcollections","tagline":"Collection package for D","body":"# Welcome to dcollections\r\n\r\n_(note that some links still point back at dsource, which I will fix when I move that data/pages over to github)._\r\n\r\ndcollections is an implementation of collection classes inspired by Tango, Java, and C++.  The goal of dcollections is to provide an efficient collections implementation that uses as many D ideas as possible.\r\n\r\nDcollections 1.0 has been released and will no longer be maintained (anyone interested in continuing development, please send me a message, and I will link to your fork).  It is located in the D1 branch.  \r\n\r\nDcollections 2.0 has gone into beta.  Version 2.0 is built for D2, and will not work with D1.  The version numbers will be 2.0a, 2.0b, etc. until it comes out of beta, and then it will be just called 2.0.  The current beta release 2.0c is available in [tarball](http://www.dsource.org/projects/dcollections/browser/downloads/dcollections-2.0c.tgz?format=raw) and [zip](http://www.dsource.org/projects/dcollections/browser/downloads/dcollections-2.0c.zip?format=raw zip) formats.\r\n\r\n### License\r\n\r\ndcollections 1.0 is Open Source software distributed under the BSD License.  See the full license [here](http://www.dsource.org/projects/dcollections/wiki/LibraryLicense).\r\n\r\ndcollections 2.0 is Open Source software distributed under the Boost License.  See the full license [here](http://www.dsource.org/projects/dcollections/wiki/LibraryLicenseBoost).\r\n\r\n### Features\r\n\r\n* Hash, RBTree, Link, Array, and Deque implementations for appropriate containers.\r\n* List, Set, Map, and Multiset containers provided.\r\n* Able to swap out underlying implementation of a container, or customize implementation.\r\n* Minimized heap activity.  All cursors and ranges are struct-based.\r\n* Safe slicing.\r\n* Removal while traversing.\r\n* Removal of elements does not invalidate cursors or ranges when possible.\r\n* Cursors and ranges can be kept for later use (such as O(1) removal if supported by the container).\r\n* Interfaces for implementation-independent code.\r\n* Concatenation and appending for lists.\r\n* dup functions.\r\n* Set/Map intersection.\r\n* Filter, transform, and chain iterators.\r\n* Custom allocators.\r\n\r\nSee the full [change log](http://www.dsource.org/projects/dcollections/wiki/ChangeLog)\r\n\r\n### Documentation\r\n\r\nAt this point, documentation does not exist online.  You must run ddoc on the source to get a documentation output.  I am planning on adding dcollections to dub, and use vibe.d's doc generation system (which should become official ddoc eventually).\r\n\r\nThere is no tutorial, and may never be :(  Unfortunately I have very little time.  It is on the list of things to do.\r\n\r\n### TODO\r\n\r\nIn no specific order:\r\n\r\n* Add debug-mode code to allow ranges and cursors to check validity for testing.\r\n* Remove workarounds when compiler is fixed.\r\n* Figure out how to make const cursors/ranges work (need tail-const for this).\r\n* Look into how to have shared containers.\r\n* tutorial","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}